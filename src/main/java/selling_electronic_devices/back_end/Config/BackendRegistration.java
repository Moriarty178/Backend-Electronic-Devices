package selling_electronic_devices.back_end.Config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;

import javax.annotation.PreDestroy;
import java.net.InetAddress;

@Component
public class BackendRegistration implements CommandLineRunner {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    @Value("${server.port}")
    private String port;

    private String backendAddress;

    @Override
    public void run(String... args) throws Exception {
        //String port = System.getProperty("server.port"); // ko l·∫•y ƒë∆∞·ª£c do --PORT=8084 ko ƒë∆∞·ª£c coi l√† System Property

        // L·∫•y IP c·ªßa m√°y ch·ªß
        String ip = InetAddress.getLocalHost().getHostAddress(); // "127.0.0.1"

        // ƒê·ªãnh nghƒ©a ƒë·ªãa ch·ªâ m√°y ch·ªß ƒë·ªÉ ƒëƒÉng k√Ω/h·ªßy - (th√™m/x√≥a) kh·ªèi Redis
        backendAddress = ip + ":" + port;

        //  ƒêƒÉng k√Ω - l∆∞u m√°y ch·ªß v√†o Redis
        redisTemplate.opsForSet().add("backend_servers", backendAddress);
        System.out.println("Registered backend in Redis: " + backendAddress);

        // üí° ƒê·∫£m b·∫£o x√≥a backend khi ·ª©ng d·ª•ng b·ªã d·ª´ng
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            deregisterBackend();
        }));

//        Runtime.getRuntime().addShutdownHook(new Thread(this::deregisterBackend));
//        // üî• Gi·ªØ ·ª©ng d·ª•ng ch·∫°y v√¥ th·ªùi h·∫°n ƒë·ªÉ tr√°nh shutdown qu√° s·ªõm
//        new CountDownLatch(1).await();
    }

    // Shutdown hook: x√≥a m√°y ch·ªß kh·ªèi danh s√°ch backend_servers trong Redis
    @PreDestroy
    public void deregisterBackend() {
        if (backendAddress != null) {
            // x√≥a m√°y ch·ªß
            redisTemplate.opsForSet().remove("backend_servers", backendAddress);
            System.out.println("Deregistered backend from Redis: " + backendAddress);
        }
    }
}
